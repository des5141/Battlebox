<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// device_mouse_dbclick_enable
device_mouse_dbclick_enable(false);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw_set_circle_precision
draw_set_circle_precision(64);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable
active = true;

point_index[0] = -1;
point_index[1] = -1;
left_point = array_create(2);
right_point = array_create(2);
right_point_basic = array_create(2);
left_size = 100;
right_size = 80;

left_padding = 100;

right_basic[0] = view_wview[0] - right_size - left_padding - 120;
right_basic[1] = view_hview[0] - right_size - 70;
left_basic[0] = left_size + left_padding;
left_basic[1] = view_hview[0] - left_size - left_padding;

joyEnable = array_create(2);
joyDistance = array_create(2);
joyDirection = array_create(2);
joyStickTrigger = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// touch check and draw
var mx, my;
if (active == true) {
    /// control
    for( var i = 0; i &lt; 4; i++ ) {
        mx = device_mouse_x_to_gui(i);
        my = device_mouse_y_to_gui(i);
        
        // LEFT joystick
        if(point_index[0] == -1) {
            if (device_mouse_check_button_pressed(i, mb_left)) {
                if (mx &lt; 640) and (my &gt; 360) {
                    point_index[0] = i;
                    left_point[0] = mx;
                    left_point[1] = my;
                    if (joyStickTrigger) {
                        left_basic[0] = mx;
                        left_basic[1] = my;
                    }
                }
            }   
        } else if(point_index[0] == i) {
            if (device_mouse_check_button_released(i, mb_left)) {
                point_index[0] = -1;
                // 터치를 놓으면 원점으로 돌아가도록 
                left_basic[0] = left_size + left_padding;
                left_basic[1] = 720 - left_size - left_padding;
            }
            else {
                left_point[0] = mx;
                left_point[1] = my;
            }
        }
        
        // RIGHT joystick
        if(point_index[1] == -1) {
            if (device_mouse_check_button_pressed(i, mb_left)) {
                if (mx &gt; 640) and (my &gt; 360) and (mx &lt; 1060) {
                    point_index[1] = i;
                    right_point[0] = mx;
                    right_point[1] = my;
                    if (joyStickTrigger) {
                        right_basic[0] = mx;
                        right_basic[1] = my;
                    }
                    right_point_basic[0] = mx;
                    right_point_basic[1] = my;
                }
            }   
        } else if(point_index[1] == i) {
            if (device_mouse_check_button_released(i, mb_left)) {
                point_index[1] = -1;
                // 터치를 놓으면 원점으로 돌아가도록 
                right_basic[0] = 1280 - right_size - left_padding - 120;
                right_basic[1] = 720 - right_size - 70;
                if(point_distance(right_point_basic[0],right_point_basic[1],right_point[0],right_point[1]) &lt; 10) {
                    show_message("clicked");
                }
            }
            else {
                right_point[0] = mx;
                right_point[1] = my;
            }
        }
    }
    // ---------
    
    /// Set 
    joyEnable[0] = point_index[0] != -1;
    joyEnable[1] = point_index[1] != -1;
    joyDistance[0] = min(left_size, point_distance(left_point[0], left_point[1], left_basic[0], left_basic[1]));
    joyDistance[1] = min(right_size, point_distance(right_point[0], right_point[1], right_basic[0], right_basic[1]));
    joyDirection[0] = point_direction(left_point[0], left_point[1], left_basic[0], left_basic[1]);
    if(point_distance(right_point_basic[0],right_point_basic[1],right_point[0],right_point[1]) &gt; 10)
        joyDirection[1] = point_direction(right_point[0], right_point[1], right_basic[0], right_basic[1]);
        
    if(joyEnable[0] == false)
        joyDistance[0] = 0;
    if(joyEnable[1] == false)
        joyDistance[1] = 0;
    // ---------
    
    /// Draw
    draw_set_alpha(0.4);
    draw_set_color(c_white);
    draw_circle(left_basic[0], left_basic[1], left_size, false);
    if(point_distance(right_point_basic[0],right_point_basic[1],right_point[0],right_point[1]) &gt; 10)and(joyDistance[1])
    draw_circle(right_basic[0], right_basic[1], right_size, false);
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_circle(left_basic[0], left_basic[1], (left_size/10)*9, false);
    if(point_distance(right_point_basic[0],right_point_basic[1],right_point[0],right_point[1]) &gt; 10)and(joyDistance[1])
    draw_circle(right_basic[0], right_basic[1], (right_size/10)*9, false);
    draw_set_alpha(0.8);
    draw_set_color(c_white);
    draw_circle(left_basic[0] - lengthdir_x(min(left_size, joyDistance[0]), joyDirection[0]),
    left_basic[1] - lengthdir_y(min(left_size, joyDistance[0]), joyDirection[0]), 20, false);
    
    if(point_distance(right_point_basic[0],right_point_basic[1],right_point[0],right_point[1]) &lt; 10)and(joyDistance[1])
    draw_circle(right_basic[0],
    right_basic[1], 40, false);
    else
    draw_circle(right_basic[0] - lengthdir_x(min(right_size, joyDistance[1]), joyDirection[1]),
    right_basic[1] - lengthdir_y(min(right_size, joyDistance[1]), joyDirection[1]), 40, false);
    // ---------
}

// non - activated
else {

}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

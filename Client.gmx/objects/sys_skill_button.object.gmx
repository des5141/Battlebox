<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Variable
size = 50;
x = view_wview[0] - 120;
y = view_hview[0] - 120;

gage = 0;
gage_max = 100;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// touch check and draw
if(global.controller) {
    var mx, my;
    for( var i = 0; i &lt; 4; i++ ) {
        if(device_mouse_check_button_pressed(i, mb_left)) {
            mx = device_mouse_x_to_gui(i);
            my = device_mouse_y_to_gui(i);
            
            if (point_distance(mx, my, x, y) &lt; size) {
                gage += irandom_range(1, 10);
            }
        }
    }
    
    draw_set_alpha(0.4);
    draw_set_color(c_white);
    draw_circle(x, y, size, false);
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_circle(x, y, (size/10)*9, false);
    
    draw_set_color(make_colour_rgb(0, 44, 0));
    draw_rectangle(x - size/2 + size/10, y - size/2 - size/10, x + size/2 - size/10, y + size/2 + size/10, false);
    
    draw_set_alpha(1);
    if(gage &gt; 0) {
        if(gage &gt; gage_max)
            gage = gage_max;
        if(gage == gage_max)
            draw_set_color(make_colour_rgb(241, 95, 95));
        else
            draw_set_color(make_colour_rgb(134, 229, 127));
        draw_rectangle(x - size/2 + size/10, y + size/2 + size/10, x + size/2 - size/10, y + size/2 + size/10 - (((size+size/5)/gage_max)*gage), false);
    
    }
}else {
    size = 50;
    x = 1280 - 120;
    y = 720 - 120;
    gage = 0;
    gage_max = 100;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

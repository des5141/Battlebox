<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chr_leg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_unit</parentName>
  <maskName>spr_chr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sprite init
image_speed = 0;
image_index = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// engine init
dir = 0;
z = 0;
zspeed = 0;
nuckback = 0;
target_speed = 0;
move = false;
target_x = x;
target_y = y;
target_z = z;
mine = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// variables init
index = -1;
nickname = "";
type = -1;
active = false;
damaged = 0;

hp_set(1);
mp_set(1);
die = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// weapon init
weapon = 0;

// 공격할때 사용되는 변수들
weapon_len = 7; // 멀리 떨어져있는 정도
weapon_delay = 0; // 딜레이
weapon_delay_max = 0; // 딜레이 최고치
weapon_dir = 0; // 전체적인 각도
weapon_damage = 0;
weapon_mp = 0; // 한번의 공격에 소모되는 마나의 량

// gun variables
weapon_add_x = 0; // 추가되는 x 위치
weapon_add_y = 0; // 추가되는 y 위치
weapon_add_dir_hand = 0; // 손에서 추가되는 각도
weapon_step = 0;
weapon_step_max = 0;
weapon_step_trigger = false;
weapon_step_mode = 0; // 0 is knife, 1 is gun

// knife variables
weapon_add_dir = 0;
weapon_add_len = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>20</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>1</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TEST : weapon set
//weapon = 1;
weapon_set(weapon);
weapon_step_max = 0;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// 마나 복구
if(mine) {
    if(mp &lt; mp_max) {
        mp++;
    }else {
        mp = mp_max;
    }    
    
    alarm[1] = 20;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// network send
if(global.playerIndex == index) {
    buf = buf_new(128);
    buf_write(buf, buffer_u16, x);
    buf_write(buf, buffer_u16, y);
    buf_write(buf, buffer_u8, z);
    buf_write(buf, buffer_u8, image_index);
    buf_write(buf, buffer_s8, image_xscale);
    buf_write(buf, buffer_u8, weapon);
    buf_write(buf, buffer_s16, weapon_dir);
    supersocket_send(buf, signal.userPosition, sendTo.Server);
    buf_del(buf);
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>301</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_alarm</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>2</string>
          </argument>
          <argument>
            <kind>4</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// alive check
if(hp &lt;= 0) {
    if(mine) and (active) and (die == false) {
        die_set(true);
        
        // send my die data to another
        buf = buf_new(16);
        buf_write(buf, buffer_u8, global.playerIndex);
        supersocket_send(buf, signal.userDie, sendTo.Server);
        buf_del(buf);
        
        target_speed = 0;
        global.controller = false;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement
if (mine) {
    if(active) {
        obj_minimap.player[0] = floor(y/32);
        obj_minimap.player[1] = floor(x/32);
        
        if(weapon_delay &gt; 0)
            weapon_delay--;
        else
            weapon_delay = 0;
        
        with(par_interact) { active = false; }
        var ins;
        if(instance_exists(par_interact)) {
            ins = instance_nearest(x, y, par_interact);
            if(point_distance(x, y, ins.x, ins.y) &lt; 50) {
                ins.active = true;
                if(sys_joystick.joyClicked == true)
                    with(ins){event_user(15);}
            }
        }
        sys_joystick.joyClicked = false;
        
        if(nuckback == 0)and(global.controller) {
            if(sys_joystick.joyEnable[0]){
                dir = sys_joystick.joyDirection[0]
                target_speed += sys_joystick.joyDistance[0] / 30 * system.delta;
            }else {
                target_speed += (0 - target_speed)/20;
                if(target_speed &lt; 0.2) {
                    target_speed = 0;
                }
                if(sys_joystick.joyEnable[1]){
                    dir = sys_joystick.joyDirection[1]
                }
            }
            
            if(sys_joystick.joyEnable[1]) {
                // 공격 부분
                if(sys_joystick.joyDistance[1] &gt; 70) {
                    if(weapon_delay &lt;= 0) {
                        // attack!
                        if(mp &gt;= weapon_mp) {
                            weapon_attack(true);
                        }else { 
                            message(id, -70, "마나가 부족하다");
                        }
                    }
                }
            }
        if(weapon_delay &gt; 0)
            weapon_delay--;
        }
        nuckback += ( 0 - nuckback )/20;
        z += zspeed;
        if(z &lt; 0) {
            z = 0;
            zspeed = 0;
        }
        else
            zspeed -= 0.05;
        
        if(nuckback &gt; -0.3) {
            nuckback = 0;
        }
        if(target_speed &gt; 1) target_speed = 1;
        
        var _spd;
        _spd = nuckback + target_speed;
        
        hspeed = lengthdir_x(_spd, dir);
        vspeed = lengthdir_y(_spd, dir);
        if (collision_rectangle(x - 8 + ceil(hspeed), y - 5, x + 8 + ceil(hspeed), y, par_wall, false, false) != noone ) {
            hspeed = 0;
            x = xprevious;
        }
        if (collision_rectangle(x - 8, y - 5 + floor(vspeed), x + 8, y + floor(vspeed)+ 1, par_wall, false, false) != noone ) {
            vspeed = 0;
            y = yprevious;
        }
        
        if ( (hspeed != 0) or (vspeed != 0) )and(nuckback == 0) {
            image_speed = (0.15)*target_speed;
        }else {
            image_speed = 0;
            image_index = 0;
        }
        
        if(dir &gt; 90) and (dir &lt; 270)
            image_xscale = -1;
        else
            image_xscale = 1;
        
    }else{
        hspeed = 0;
        vspeed = 0;
        target_speed = 0;
        nuckback = 0;
        image_index = 0;
        image_speed = 0;
    }
}else{
    x += (target_x - x)/2;
    y += (target_y - y)/2;
    z += (target_z - z)/2;
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
if (z &gt; 0)
    image_index = 14;
    



if(die == false) {
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_ellipse(x - 10, y - 2, x + 10, y + 2, false);
    draw_set_alpha(1);
    
    draw_sprite_ext(sprite_index, image_index, x, y - z, image_xscale, image_yscale, image_angle, c_white, image_alpha);
    draw_sprite_ext(spr_chr_body, type, x, y - z, image_xscale, image_yscale, image_angle, c_white, image_alpha);
    
    if (damaged &gt; 0) {
        d3d_set_fog(true, c_white, 0, 0);
        
        draw_set_alpha(damaged);
        draw_sprite_ext(sprite_index, image_index, x, y - z, image_xscale, image_yscale, image_angle, c_white, image_alpha);
        draw_sprite_ext(spr_chr_body, type, x, y - z, image_xscale, image_yscale, image_angle, c_white, image_alpha);
        draw_set_alpha(1);
        
        d3d_set_fog(false, c_white, 0, 0);
        
        damaged -= 0.05;
    }else
        damaged = 0;
}else {
    // 죽은 상태
    draw_set_alpha(0.5);
    draw_set_color(c_black);
    draw_ellipse(x - 13, y - 2, x + 13, y + 2, false);
    draw_set_alpha(1);
    
    draw_sprite_ext(sprite_index, 6, x + 16, y - z - 4, 1, image_yscale, 90, c_white, image_alpha);
    draw_sprite_ext(spr_chr_body, type, x + 16, y - z - 4, 1, image_yscale, 90, c_gray, image_alpha);
    
    
}
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// weapon draw

if(mine == true) {
    if(sys_joystick.joyEnable[0]) {
        weapon_dir = sys_joystick.joyDirection[0];
    }
    
    if(sys_joystick.joyEnable[1]) {
        weapon_dir = sys_joystick.joyDirection[1];
    }
}


var _x, _y, _dir;
_x = x + lengthdir_x(weapon_len, weapon_dir);
_y = y - 16 - z + lengthdir_y(weapon_len, weapon_dir);
_dir = weapon_dir;

if(weapon_step_max != 0) {
    
    switch(weapon_step_mode) {
        // 0 is knife
        case 0:
            var temp_add_dir, temp_step;
            temp_step = ease_in_out_quintic((1/weapon_step_max)*weapon_step);
            
            
            temp_add_dir = -weapon_add_dir * temp_step * image_xscale - 90 * image_xscale;
            _dir = 90 - weapon_add_dir * temp_step * image_xscale
            
            
            _x += lengthdir_x(-weapon_add_len, temp_add_dir) * image_xscale;
            _y += lengthdir_y(-weapon_add_len, temp_add_dir) * image_xscale;
            
             if(weapon_step_trigger == false)
                if(weapon_step &lt; weapon_step_max)
                    weapon_step++;
                else {
                    weapon_step = 0;
                    weapon_step_trigger = true;
                    weapon_step_max = 0;
                }
        break;
        
        // 1 is gun
        case 1:
            var temp_add_dir, temp_step;
            temp_step = ease_in_quintic((1/weapon_step_max)*weapon_step);
            temp_add_dir = point_direction(0, 0, -weapon_add_x, -weapon_add_y) * image_xscale;
            _dir += weapon_add_dir_hand * temp_step * image_xscale;
            _x += lengthdir_x(weapon_add_x * temp_step, temp_add_dir) * image_xscale;
            _y += lengthdir_y(weapon_add_y * temp_step, temp_add_dir) * image_xscale;
            
             if(weapon_step_trigger == false)
                if(weapon_step &lt; weapon_step_max)
                    weapon_step++;
                else {
                    weapon_step = weapon_step_max;
                    weapon_step_trigger = true;
                }
            else
                if(weapon_step &gt; 0)
                    weapon_step--;
                else
                    weapon_step = 0;
        break;
    }
}

draw_sprite_ext(spr_weapon, weapon, _x, _y, 1, image_xscale, _dir, c_white, 1);
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// hp bar draw
if(hp &gt; 0) {
    draw_set_color(c_gray);
    draw_rectangle(x - 16, y - 24-10, x + 16, y - 21-10, false);
    draw_set_color(c_red);
    draw_rectangle(x - 16, y - 24-10, x - 16 + (32/hp_max)*hp, y - 21-10, false);
    draw_set_color(c_black);
    draw_rectangle(x - 17, y - 25-10, x + 16, y - 21-10, true);
    draw_set_color(c_white);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="9" enumb="32">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// NUCKBACK!! TEST!!
/*if(active) {
    dir = irandom_range(0, 360);
    nuckback = -6;
    zspeed = 0.8;
    z = 0;
    if(dir &gt; 90) and (dir &lt; 270)
        weapon_dir = 180;
    else
        weapon_dir = 0;
}*/
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// TEST : die
if(mine) and (active) {
    hp = 0;
    weapon = 0;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>

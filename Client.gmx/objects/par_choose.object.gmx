<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_chr_leg</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>par_unit</parentName>
  <maskName>spr_chr_mask</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// sprite init
image_speed = 0;
image_index = 0;
move = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// id set
type = -1; // null
name = "NULL";
nuckback = 0;
target_speed = 0;
dir = 0;
z = 0;
zspeed = 0;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// instance init
active = false;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>604</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>0</useapplyto>
        <exetype>1</exetype>
        <functionname>action_inherited</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="57">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Cancel TEST!
with (obj_choose_view) {
    select = -1;
    target = -1;
    mode = -1;
    zoom = 1;
    target_x = 480/2;
    target_y = 270/2;
    global.controller = false;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="7">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// select
with (obj_choose_view) {
    if(mode == -1) {
        select = other.type;
        target = other.id;
        mode = 0;
        zoom = 0.5
        target_x = other.x
        target_y = other.y
        title_text = other.name;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// movement
if(active) {
    with(par_interact) { active = false; }
    with(par_interact_solid) { active = false; }
    var ins, trigger_ins = false;
    if(instance_exists(par_interact)) {
        ins = instance_nearest(x, y, par_interact);
        if(point_distance(x, y, ins.x, ins.y) &lt; 50) {
            ins.active = true;
            if(sys_joystick.joyClicked == true)
                with(ins){event_user(15);}
        }else {
            trigger_ins = true;
        }
    }else
        trigger_ins = true;
        
    if(instance_exists(par_interact_solid)) and (trigger_ins) {
        ins = instance_nearest(x, y, par_interact_solid);
        if(point_distance(x, y, ins.x, ins.y) &lt; 50) {
            ins.active = true;
            if(sys_joystick.joyClicked == true)
                with(ins){event_user(15);}
        }  
    }
    sys_joystick.joyClicked = false;
    
    if(sys_joystick.joyEnable[0]) and (global.controller == true) and (nuckback == 0){
        dir = sys_joystick.joyDirection[0]
        target_speed += sys_joystick.joyDistance[0] / 30 * system.delta;
    }else {
        target_speed += (0 - target_speed)/20;
        if(target_speed &lt; 0.2) {
            target_speed = 0;
        }
        if(sys_joystick.joyEnable[1]) and (global.controller == true) {
            dir = sys_joystick.joyDirection[1]
        }
    }
    nuckback += ( 0 - nuckback )/20;
    z += zspeed;
    if(z &lt; 0) {
        z = 0;
        zspeed = 0;
    }
    else
        zspeed -= 0.05;
    
    if(nuckback &gt; -0.3) {
        nuckback = 0;
    }
    if(target_speed &gt; 1) target_speed = 1;
    
    var _spd;
    _spd = nuckback + target_speed;
    
    hspeed = lengthdir_x(_spd, dir);
    vspeed = lengthdir_y(_spd, dir);
    if (collision_rectangle(x - 8 + ceil(hspeed), y - 5, x + 8 + ceil(hspeed), y, par_wall, false, false) != noone ) {
        hspeed = 0;
        x = xprevious;
    }
    if (collision_rectangle(x - 8, y - 5 + floor(vspeed), x + 8, y + floor(vspeed)+ 1, par_wall, false, false) != noone ) {
        vspeed = 0;
        y = yprevious;
    }
    
    if ( (hspeed != 0) or (vspeed != 0) )and(nuckback == 0) {
        image_speed = (0.2)*target_speed;
    }else {
        image_speed = 0;
        image_index = 0;
    }
    
    if(dir &gt; 90) and (dir &lt; 270)
        image_xscale = -1;
    else
        image_xscale = 1;
    
    var ins = collision_rectangle(x - 8 + hspeed, y - 5 + vspeed, x + 8 + hspeed, y + vspeed, obj_door, false, false);
    if (ins != noone) {
        /// start matching
        if(ins.open == false) {
            ins.open = true;
            
            // 매칭 시작
            if(ins.trigger == false) {
                ins.trigger = true;
                obj_choose_view.zoom = 0.5;
                obj_choose_view.mode = 2;
                global.controller = false;
            }
        }
    }else{
        if(obj_door.trigger == true) {
            obj_choose_view.zoom = 1;
            obj_choose_view.mode = 1;
            global.controller = true;
        }
        obj_door.trigger = false;
        obj_door.open = false;
    }
}else{
    hspeed = 0;
    vspeed = 0;
    target_speed = 0;
    nuckback = 0;
    image_index = 0;
    image_speed = 0;
}

</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// draw
if (z &gt; 0)
    image_index = 14;
    
draw_set_alpha(0.5);
draw_set_color(c_black);
draw_ellipse(x - 10, y - 2, x + 10, y + 2, false);
draw_set_alpha(1);
draw_sprite_ext(sprite_index, image_index, x, y - z, image_xscale, image_yscale, image_angle, c_white, image_alpha);
draw_sprite_ext(spr_chr_body, type, x, y - z, image_xscale, image_yscale, image_angle, c_white, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
